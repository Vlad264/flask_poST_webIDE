(* 3-floor elevator with LED floor indicators *) 

(* Controller *)	
PROGRAM Controller
VAR_INPUT
	(* floor sensors *)
	onfloor0 : BOOL;
	onfloor1 : BOOL;
	onfloor2 : BOOL;
	(* floor call buttons *)
	call0 : BOOL;
	call1 : BOOL;
	call2 : BOOL;
	(* inside car call buttons *)
	button0 : BOOL;
	button1 : BOOL;
	button2 : BOOL;
	(* doors sensors *)
	door0closed : BOOL;
	door1closed : BOOL;
	door2closed : BOOL;
END_VAR
VAR_OUTPUT
	(* elevator *)
	up : BOOL;
	down : BOOL;
	(* doors *)
	open0 : BOOL;
	open1 : BOOL;
	open2 : BOOL;
	(* LEDs for inside/outside call buttons *)
	call0_LED : BOOL;
	call1_LED : BOOL;
	call2_LED : BOOL;
	button0_LED : BOOL;
	button1_LED : BOOL;
	button2_LED : BOOL;
	(* cur floor LEDs *)
	floor0_LED : BOOL;
	floor1_LED : BOOL;
	floor2_LED : BOOL;
	(* cur floor num *)
	cur : INT;
END_VAR

VAR
	(* target floor num *)
	target : INT;
END_VAR

PROCESS Init (* initial process *)
	STATE begin
		START PROCESS Call0Latch;
		START PROCESS Call1Latch;
		START PROCESS Call2Latch;
		START PROCESS Button0Latch;
		START PROCESS Button1Latch;
		START PROCESS Button2Latch;
		START PROCESS CheckCurFloor;
		START PROCESS UpControl; 
		STOP;
	END_STATE
END_PROCESS

PROCESS Call0Latch 
	VAR 
		prev_in : BOOL;
		prev_out : BOOL;
	END_VAR
	STATE init
		prev_in := NOT call0;
		prev_out := NOT open0;
		SET NEXT;
	END_STATE
	STATE check_ON_OFF LOOPED 
		IF call0 AND NOT prev_in THEN
			call0_LED := TRUE;
		END_IF
		IF open0 AND NOT prev_out THEN
			call0_LED := FALSE;
		END_IF
		prev_in := call0;
		prev_out := open0;
	END_STATE
END_PROCESS

PROCESS Call1Latch  
	VAR  
		prev_in : BOOL;
		prev_out : BOOL;
	END_VAR
	STATE init
		prev_in := NOT call1;
		prev_out := NOT open1;
		SET NEXT;
	END_STATE
	STATE check_ON_OFF LOOPED 
		IF call1 AND NOT prev_in THEN
			call1_LED := TRUE;
		END_IF
		IF open1 AND NOT prev_out THEN
			call1_LED := FALSE;
		END_IF
		prev_in := call1;
		prev_out := open1;
	END_STATE
END_PROCESS

PROCESS Call2Latch 
	VAR 
		prev_in : BOOL;
		prev_out : BOOL;
	END_VAR
	STATE init
		prev_in := NOT call2;
		prev_out := NOT open2;
		SET NEXT;
	END_STATE
	STATE check_ON_OFF LOOPED 
		IF call2 AND NOT prev_in THEN
			call2_LED := TRUE;
		END_IF
		IF open2 AND NOT prev_out THEN
			call2_LED := FALSE;
		END_IF
		prev_in := call2;
		prev_out := open2;
	END_STATE
END_PROCESS

PROCESS Button0Latch 
	VAR  
		prev_in : BOOL;
		prev_out : BOOL;
	END_VAR
	STATE init
		prev_in := NOT button0;
		prev_out := NOT open0;
		SET NEXT;
	END_STATE
	STATE check_ON_OFF LOOPED 
		IF button0 AND NOT prev_in THEN
			button0_LED := TRUE;
		END_IF
		IF open0 AND NOT prev_out THEN
			button0_LED := FALSE;
		END_IF
		prev_in := button0;
		prev_out := open0;
	END_STATE
END_PROCESS

PROCESS Button1Latch
	VAR  
		prev_in : BOOL;
		prev_out : BOOL;
	END_VAR
	STATE init
		prev_in := NOT button1;
		prev_out := NOT open1;
		SET NEXT;
	END_STATE
	STATE check_ON_OFF LOOPED 
		IF button1 AND NOT prev_in THEN
			button1_LED := TRUE;
		END_IF
		IF open1 AND NOT prev_out THEN
			button1_LED := FALSE;
		END_IF
		prev_in := button1;
		prev_out := open1;
	END_STATE
END_PROCESS

PROCESS Button2Latch
	VAR 
		prev_in : BOOL;
		prev_out : BOOL;
	END_VAR
	STATE init
		prev_in := NOT button2;
		prev_out := NOT open2;
		SET NEXT;
	END_STATE
	STATE check_ON_OFF LOOPED 
		IF button2 AND NOT prev_in THEN
			button2_LED := TRUE;
		END_IF
		IF open2 AND NOT prev_out THEN
			button2_LED := FALSE;
		END_IF
		prev_in := button2;
		prev_out := open2;
	END_STATE
END_PROCESS

PROCESS CheckCurFloor 
	STATE check_floor
		IF onfloor0 THEN 
			cur := 0;
			floor0_LED := TRUE;
			floor1_LED := FALSE;
			floor2_LED := FALSE;
		ELSIF onfloor1 THEN 
			cur := 1;
			floor0_LED := FALSE;
			floor1_LED := TRUE;
			floor2_LED := FALSE;
		ELSIF onfloor2 THEN 
			cur := 2;
			floor0_LED := FALSE;
			floor1_LED := FALSE;
			floor2_LED := TRUE;
		END_IF
	END_STATE
END_PROCESS

PROCESS UpControl (* up motion priority *)
	STATE check_calls
		(* a call from the current floor? *)
  		IF	(cur = 0 AND (call0_LED OR button0_LED)) OR  
			(cur = 1 AND (call1_LED OR button1_LED)) OR 
			(cur = 2 AND (call2_LED OR button2_LED)) THEN 
			START PROCESS DoorCycle; 
			SET STATE door_cycle;
	  	ELSE
			(* are there other calls? *)
			CASE (cur) OF (* a call from an upper floor? *)
				0: 	IF ((call1_LED OR button1_LED) OR
    					(call2_LED OR button2_LED))THEN 
						START PROCESS UpMotion;
						SET NEXT;
					END_IF
				1: 	IF (call2_LED OR button2_LED) THEN (* above? *)
						START PROCESS UpMotion;
						SET NEXT;
					ELSIF (call0_LED OR button0_LED) THEN (* below? *)
						START PROCESS DownControl;
						STOP;
					END_IF
				2: 	START PROCESS DownControl; (* switch direction *)
					STOP;
				END_CASE
		END_IF
	END_STATE
	STATE check_stop 
		IF (PROCESS UpMotion IN STATE INACTIVE) THEN 
			START PROCESS DoorCycle; 
			SET NEXT;
		END_IF
	END_STATE
	STATE door_cycle 
		IF (PROCESS DoorCycle IN STATE INACTIVE) THEN 
			RESTART; (* set the initial state *)
		END_IF 			
	END_STATE
END_PROCESS


PROCESS UpMotion 
	STATE start (* check the next floor call *)
		up := TRUE;
		CASE (cur) OF 
			0: 	IF (call1_LED OR button1_LED) THEN 
					target := 1; (* if next floor *)
					SET NEXT;
				END_IF
			1: 
				IF (call2_LED OR button2_LED) THEN 
					target := 2; (* if next floor *)
					SET NEXT;
				END_IF 
			2: 
				target := 2; (* a stub *)
				SET NEXT;
			END_CASE			
	END_STATE
	STATE check_target
		IF (cur = target) THEN  (* have arrived? *)
			up := FALSE;
			STOP;
		END_IF			
	END_STATE
END_PROCESS



PROCESS DownControl
	STATE check_calls
		(* a call from the current floor? *)
  		IF	(cur = 0 AND (call0 OR button0)) OR 
			(cur = 1 AND (call1 OR button1)) OR 
			(cur = 2 AND (call2 OR button2)) THEN 
			START PROCESS DoorCycle; 
			SET STATE door_cycle;
	  	ELSE
			(* are there other calls? down or switch *)
			CASE (cur) OF 
				0: 	START PROCESS UpControl; 
					STOP;
				1: 	IF (call0_LED OR button0_LED) THEN (* down? go *)
						START PROCESS DownMotion;
						SET NEXT;
					ELSIF (call2_LED OR button2_LED) THEN (* up? switch *)
						START PROCESS UpControl;
						STOP;
					END_IF
				2: 	IF 	((call1_LED OR button1_LED) OR
    						(call0_LED OR button0_LED))THEN  
						START PROCESS DownMotion;
						SET NEXT;
					END_IF
				END_CASE
		END_IF
	END_STATE
	STATE check_stop 
		IF (PROCESS DownMotion IN STATE INACTIVE) THEN 
			START PROCESS DoorCycle; 
			SET NEXT;
		END_IF
	END_STATE
	STATE door_cycle 
		IF (PROCESS DoorCycle IN STATE INACTIVE) THEN 
			RESTART;
		END_IF 			
	END_STATE
END_PROCESS

PROCESS DownMotion 
	STATE start
		down := TRUE;
		CASE (cur) OF  
			0: (* a stub *)
				target := 0;  
			SET NEXT;	
			1: 
				IF (call0_LED OR button0_LED) THEN 
					target := 0; (* if next floor *)
					SET NEXT;
				END_IF
			2: 
				IF (call1_LED OR button1_LED) THEN 
					target := 1; (* if next floor *)
					SET NEXT;
				END_IF
			END_CASE	
	END_STATE
	STATE chech_next
		IF (cur = target) THEN (* have arrived? *)
			down := FALSE;
			STOP;
		END_IF			
	END_STATE
END_PROCESS

PROCESS DoorCycle
	STATE choose_door_to_open
		CASE (cur) OF
			0:  open0 := TRUE;
			1:  open1 := TRUE;
			2:  open2 := TRUE;
			END_CASE
		SET NEXT;
	END_STATE
	STATE delay3s
		TIMEOUT T#3s THEN
			open0 := FALSE;
			open1 := FALSE;
			open2 := FALSE;
			SET NEXT;
		END_TIMEOUT
	END_STATE
	STATE check_closed
		IF 	(door0closed AND 
			 door1closed AND 
			 door2closed) THEN
			STOP;
		END_IF
	END_STATE
END_PROCESS
END_PROGRAM

(* Plant *)
PROGRAM Plant
VAR_INPUT
	(* floor sensors *)
	onfloor0 : BOOL;
	onfloor1 : BOOL;
	onfloor2 : BOOL;
	(* floor call buttons *)
	call0 : BOOL;
	call1 : BOOL;
	call2 : BOOL;
	(* inside car call buttons *)
	button0 : BOOL;
	button1 : BOOL;
	button2 : BOOL;
	(* doors sensors *)
	door0closed : BOOL;
	door1closed : BOOL;
	door2closed : BOOL;
END_VAR
VAR_OUTPUT
	(* elevator up/down *)
	up : BOOL;
	down : BOOL;
	(* doors open *)
	open0 : BOOL;
	open1 : BOOL;
	open2 : BOOL;
	(* LEDs for inside/outside call buttons *)
	call0_LED : BOOL;
	call1_LED : BOOL;
	call2_LED : BOOL;
	button0_LED : BOOL;
	button1_LED : BOOL;
	button2_LED : BOOL;
	(* cur floor LEDs *)
	floor0_LED : BOOL;
	floor1_LED : BOOL;
	floor2_LED : BOOL;
	(* cur floor num *)
	cur : INT;
END_VAR

PROCESS Init 
	STATE begin
		(* inputs: *)
		onfloor0 := FALSE;
		onfloor1 := FALSE;
		onfloor2 := FALSE;
		call0 := FALSE;
		call1 := FALSE;
		call2 := FALSE;
		button0 := FALSE;
		button1 := FALSE;
		button2 := FALSE;
		door0closed := FALSE;
		door1closed := FALSE;
		door2closed := FALSE;
		(* outputs: *)
		up := FALSE; 
		down := FALSE; 
		open0 := FALSE;
		open1 := FALSE;
		open2 := FALSE;
		call0_LED := FALSE;
		call1_LED := FALSE;
		call2_LED := FALSE;
		button0_LED := FALSE;
		button1_LED := FALSE;
		button2_LED := FALSE;
		floor0_LED := FALSE;
		floor1_LED := FALSE;
		floor2_LED := FALSE;
		
		START PROCESS Door0Sim;
		START PROCESS Door1Sim;
		START PROCESS Door2Sim;
		START PROCESS ElevatorSim;
		STOP;
	END_STATE
END_PROCESS

PROCESS Door0Sim 
	VAR CONSTANT
		DOOR_SPEED : REAL := 0.5;
		DOOR_OPEN_COORD : REAL := -50;
	END_VAR
	VAR 
		coord : REAL := 0.0;
	END_VAR
	STATE check_open_close LOOPED 
		IF open0 THEN
			coord := coord - DOOR_SPEED;
		ELSE
			coord := coord + DOOR_SPEED;
		END_IF
		IF coord >= 0.0 THEN 
			coord := 0.0;
		END_IF
		IF coord <= DOOR_OPEN_COORD THEN 
			coord := DOOR_OPEN_COORD;
		END_IF
		IF coord = 0.0 THEN  
			door0closed := TRUE;
		ELSE
			door0closed := FALSE;
		END_IF	
	END_STATE
END_PROCESS

PROCESS Door1Sim 
	VAR CONSTANT
		DOOR_SPEED : REAL := 0.5;
		DOOR_OPEN_COORD : REAL := -50;
	END_VAR
	VAR 
		coord : REAL := 0.0;
	END_VAR
	STATE check_open_close LOOPED 
		IF open1 THEN
			coord := coord - DOOR_SPEED;
		ELSE
			coord := coord + DOOR_SPEED;
		END_IF
		IF coord >= 0.0 THEN 
			coord := 0.0;
		END_IF
		IF coord <= DOOR_OPEN_COORD THEN 
			coord := DOOR_OPEN_COORD;
		END_IF
		IF coord = 0.0 THEN 
			door1closed := TRUE;
		ELSE
			door1closed := FALSE;
		END_IF
	END_STATE
END_PROCESS

PROCESS Door2Sim 
	VAR CONSTANT
		DOOR_SPEED : REAL := 0.5;
		DOOR_OPEN_COORD : REAL := -50;
	END_VAR
	VAR 
		coord : REAL := 0.0;
	END_VAR
	STATE check_open_close LOOPED 
		IF open2 THEN
			coord := coord - DOOR_SPEED;
		ELSE
			coord := coord + DOOR_SPEED;
		END_IF
		IF coord >= 0.0 THEN 
			coord := 0.0;
		END_IF
		IF coord <= DOOR_OPEN_COORD THEN 
			coord := DOOR_OPEN_COORD;
		END_IF
		IF coord = 0.0 THEN 
			door2closed := TRUE;
		ELSE
			door2closed := FALSE;
		END_IF
	END_STATE
END_PROCESS

PROCESS ElevatorSim 
	VAR CONSTANT
		ELEV_ACCEL : REAL := 0.25;
		ELEV_MAX_SPEED : REAL := 0.5;
		ELEV_DOWN_COORD : REAL := 440.0;
	END_VAR
	VAR 
		v : REAL := 0.0;
		coord : REAL := 0.0;
	END_VAR
	STATE up_down LOOPED
		IF up THEN (* velocity *)
			v := v - ELEV_ACCEL;
		ELSIF down THEN
			v := v + ELEV_ACCEL;
		ELSE
			v := 0.0;
		END_IF
		IF v > ELEV_MAX_SPEED THEN 
			v := ELEV_MAX_SPEED;
		ELSIF v < 0 - ELEV_MAX_SPEED THEN 
			v := 0 - ELEV_MAX_SPEED;
		END_IF

		coord := coord + v; (* coordinate *)
		IF coord < 0.0 THEN 
			coord := 0.0;
		ELSIF coord > ELEV_DOWN_COORD THEN 
			coord := ELEV_DOWN_COORD;
		END_IF
	
		onfloor0 := FALSE; (* sensors *)
		onfloor1 := FALSE;
		onfloor2 := FALSE;
		IF coord < 1.5 THEN 
			onfloor2 := TRUE;
		ELSIF (coord > 224.5) AND (coord < 225.5) THEN 
			onfloor1 := TRUE;
		ELSIF (coord > ELEV_DOWN_COORD - 20.0) THEN 
			onfloor0 := TRUE;
		END_IF
	END_STATE
END_PROCESS
END_PROGRAM
